// Generated by view binder compiler. Do not edit!
package com.example.productAPIExtended.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.productAPIExtended.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDescBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView descriptionCard;

  @NonNull
  public final ImageView imageCard;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView nameCard;

  @NonNull
  public final TextView priceCard;

  @NonNull
  public final TextView tvDollarsCard;

  private ItemDescBinding(@NonNull ConstraintLayout rootView, @NonNull TextView descriptionCard,
      @NonNull ImageView imageCard, @NonNull LinearLayout linearLayout, @NonNull TextView nameCard,
      @NonNull TextView priceCard, @NonNull TextView tvDollarsCard) {
    this.rootView = rootView;
    this.descriptionCard = descriptionCard;
    this.imageCard = imageCard;
    this.linearLayout = linearLayout;
    this.nameCard = nameCard;
    this.priceCard = priceCard;
    this.tvDollarsCard = tvDollarsCard;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDescBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDescBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_desc, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDescBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.description_card;
      TextView descriptionCard = ViewBindings.findChildViewById(rootView, id);
      if (descriptionCard == null) {
        break missingId;
      }

      id = R.id.image_card;
      ImageView imageCard = ViewBindings.findChildViewById(rootView, id);
      if (imageCard == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.name_card;
      TextView nameCard = ViewBindings.findChildViewById(rootView, id);
      if (nameCard == null) {
        break missingId;
      }

      id = R.id.price_card;
      TextView priceCard = ViewBindings.findChildViewById(rootView, id);
      if (priceCard == null) {
        break missingId;
      }

      id = R.id.tv_dollars_card;
      TextView tvDollarsCard = ViewBindings.findChildViewById(rootView, id);
      if (tvDollarsCard == null) {
        break missingId;
      }

      return new ItemDescBinding((ConstraintLayout) rootView, descriptionCard, imageCard,
          linearLayout, nameCard, priceCard, tvDollarsCard);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
